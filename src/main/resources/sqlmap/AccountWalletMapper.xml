<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.test.mybatis.dao.AccountWalletMapper" >
  <resultMap id="BaseResultMap" type="AccountWallet" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_open_id" property="userOpenId" jdbcType="VARCHAR" />
    <result column="user_amount" property="userAmount" jdbcType="DECIMAL" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="pay_password" property="payPassword" jdbcType="VARCHAR" />
    <result column="is_open" property="isOpen" jdbcType="INTEGER" />
    <result column="check_key" property="checkKey" jdbcType="VARCHAR" />
    <result column="version" property="version" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, user_open_id, user_amount, create_time, update_time, pay_password, is_open, check_key, 
    version
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from account_wallet
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from account_wallet
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="AccountWallet" >
    insert into account_wallet (id, user_open_id, user_amount, 
      create_time, update_time, pay_password, 
      is_open, check_key, version
      )
    values (#{id,jdbcType=INTEGER}, #{userOpenId,jdbcType=VARCHAR}, #{userAmount,jdbcType=DECIMAL}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{payPassword,jdbcType=VARCHAR}, 
      #{isOpen,jdbcType=INTEGER}, #{checkKey,jdbcType=VARCHAR}, #{version,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="AccountWallet" >
    insert into account_wallet
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userOpenId != null" >
        user_open_id,
      </if>
      <if test="userAmount != null" >
        user_amount,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="payPassword != null" >
        pay_password,
      </if>
      <if test="isOpen != null" >
        is_open,
      </if>
      <if test="checkKey != null" >
        check_key,
      </if>
      <if test="version != null" >
        version,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userOpenId != null" >
        #{userOpenId,jdbcType=VARCHAR},
      </if>
      <if test="userAmount != null" >
        #{userAmount,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payPassword != null" >
        #{payPassword,jdbcType=VARCHAR},
      </if>
      <if test="isOpen != null" >
        #{isOpen,jdbcType=INTEGER},
      </if>
      <if test="checkKey != null" >
        #{checkKey,jdbcType=VARCHAR},
      </if>
      <if test="version != null" >
        #{version,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="AccountWallet" >
    update account_wallet
    <set >
      <if test="userOpenId != null" >
        user_open_id = #{userOpenId,jdbcType=VARCHAR},
      </if>
      <if test="userAmount != null" >
        user_amount = #{userAmount,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="payPassword != null" >
        pay_password = #{payPassword,jdbcType=VARCHAR},
      </if>
      <if test="isOpen != null" >
        is_open = #{isOpen,jdbcType=INTEGER},
      </if>
      <if test="checkKey != null" >
        check_key = #{checkKey,jdbcType=VARCHAR},
      </if>
      <if test="version != null" >
        version = #{version,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="AccountWallet" >
    update account_wallet
    set user_open_id = #{userOpenId,jdbcType=VARCHAR},
      user_amount = #{userAmount,jdbcType=DECIMAL},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      pay_password = #{payPassword,jdbcType=VARCHAR},
      is_open = #{isOpen,jdbcType=INTEGER},
      check_key = #{checkKey,jdbcType=VARCHAR},
      version = #{version,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <!--通过用户唯一编号，查询用户钱包相关的信息  -->  
 <select id="selectByOpenId" resultMap="BaseResultMap" parameterType="java.lang.String">  
     select   
   <include refid="Base_Column_List" />  
   from account_wallet  
   where user_open_id = #{openId,jdbcType=VARCHAR}  
 </select>  
 <!--用户钱包数据更改 ，通过乐观锁(version机制)实现 -->  
 <update id="updateAccountWallet" parameterType="AccountWallet">  
         <![CDATA[ 
            update account_wallet set user_amount = #{userAmount,jdbcType=DECIMAL}, version = version + 1 where id =#{id,jdbcType=INTEGER} and version = #{version,jdbcType=INTEGER}  
          ]]>   
 </update>  
</mapper>